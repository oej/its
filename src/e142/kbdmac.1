!*-*-TECO-*-!

!* A keyboard macro's data is represented using two ascii characters
 to describe each 9-bit character.  The first ascii character holds
 the top 2 bits of the 9-bit character, and the second ascii character
 holds the low 7 bits.  When the macro is run, pairs of characters are
 converted back into single 9-bit characters.
 Keyboard macros are encapsulated in TECO macros by putting the 36 chars
 "<Excl>temp<Excl>m(m.m& Immediate Kbd Macro)" in front.
 This serves to make the TECO macro recognizable and to make
 it push the kbd macro when invoked.

 The keyboard macro call stack is a qvector in q..m.
 It has three slots for each call on the stack.
 The first slot contains the macro string.
   This string includes the call to & Immediate Kbd Macro.
 The second slot contains the index at which we are fetching from the string.
   The initial value of this slot is 36.
 The third slot contains the repeat count.!

!~Filename~:! !Defining and calling keyboard macros.!
KBDMAC

!& Setup KBDMAC Library:! !S Put commands on keys.  Create execution stack.!

    m.m ^R_Start_Kbd_Macro u:.x(()
    m.m ^R_End_Kbd_Macro u:.x())
    m.m ^R_Call_Last u:.x(E)
    m.m ^R_Kbd_Macro_Query u:.x(Q)
    :i* m.v Last_Kbd_Macro

    20.*5fs q vectoru..m
    q..m[..o hk 

!& Run Kbd Macro:! !S This is the FS TYI SOURCE for running keyboard macros.!

    fq..m/5-3[2
    q:..m(q2)[0			    !* Get innermost running keyboard macro string.!
    q:..m(%2)[1			    !* Fetch and increment the index at which we are fetching.!
    q1:g0*200.+(%1:g0) fs reread   !* Form next input character, from next!
				    !* two elements of string.!
    %1u:..m(q2)			    !* Store back index into string.!
    q1-fq0"l 0'		    !* If string is exhausted,!
    q:..m(%2)-1u0		    !* decrement repeat count,!
    q0f"nf"gu:..m(q2)'		    !* If not exhausted, decrement count unless it was 0!
       36u:..m(q2-1) 0'	    !* and anyway jump back to start of macro.!
    q..m[..o  zj -15d		    !* Repeat count exhausted => pop it off the pdl,!
    z"e 0 fs tyi source'	    !* and if the pdl is empty we are no longer in a macro.!
    0				    !* Return value for ^R, in case ^R is reading the char.!

!& Immediate Kbd Macro:! !S Push a kbd macro onto the execution stack of such.
Supply the repeat count as pre-comma argument
and a string pointer to the macro as post-comma argument.!

    q..m[..o
    fs tyi source"e hk'	    !* If an error turned off macro execution,!
				    !* clear out macro call stack.!
    zj 15,0i			    !* Make three more words in the call stack.!
    -1fsback str,.-15fs word	    !* Fill them with string, starting index, and rpt count.!
    36,.-10fs word
    ,.-5fs word

    m.m &_Run_Kbd_Macro fs tyi source
    0

!^R Call Last Kbd Macro:! !^R Run the last defined temporary keyboard macro.
A numeric argument is a repeat count.!

    :mLast_Kbd_Macro

!^R Start Kbd Macro:! !C Begin defining keyboad macro.
After you type this command, everything you type becomes
part of the accumulating keyboard macro as well as being executed.!

    0 fs b consm.v Kbd_Macro_Defining_Body
    0 m.v Kbd_Macro_Defining_Index
    m.m &_Define_Kbd_Macro fs tyi sink
    1:<1fs mode ch>
    0

!& Define Kbd Macro:! !S FS TYI SINK for defining kbd macros.
Takes characters typed and accumulates them in a buffer
which will be formed into a keyboard macro when the definition is finished.!

    qKbd_Macro_Defining_Body[..o zj	    !* Select the buffer we use to accumulate.!
    fs tyi beg-(fs tyi count)"e	    !* If this is 1st char of ^R command,!
      zuKbd_Macro_Defining_Index'	    !* update index in buffer of last such.!
    /200.i &177.i 0	    !* Insert the two characters for this command character.!

!^R End Kbd Macro:! !C Terminate definition of a keyboard macro.
All that you have typed since starting the definition,
except this command itself, becomes the definition.
An argument means re-execute the macro immediately, with the
argument as repeat count, counting defining the macro as once.
^R Call Last Kbd Macro re-executes the last macro defined.!

    qKbd_Macro_Defining_Body[..o
    qKbd_Macro_Defining_Indexj .,zk	!* Flush the End Kbd Macro command from the string.!
    j i !temp!m(m.m&_immediate_Kbd_Macro)   !* Put command to call kbd macro at beginning.!
    hx* m.v Last_Kbd_Macro	    !* make mLast_Kbd_Macro call the macro.!
    Q..o( ]..o
          ) fs bkill		    !* Flush the data structures used in defining.!
    0 fs tyi sink
    1:<1 fs mode ch>
    -1"e 0'			    !* If arg is 1, we are done.!
    f"g-1'mLast_Kbd_Macro'	    !* Else, repeat appropriate number of extra times.!
    0

!Name Kbd Macro:! !C Give a name to the last kbd macro defined.
An MM command is created with the name you specify,
which when invoked runs that keyboard macro.
Then, you are asked to give the command character to
put the macro on.  Type Return or Rubout if you don't want
to put it on any character.  Otherwise, type a character
which is undefined or is already a keyboard macro.
Prefix characters such as Altmode and ^X may be used.!

    1,fCommand_Name[1	    !* Read name of MM command, and define it unless null.!
    fq1"g qLast_Kbd_Macro m.v MM_1'
    :i..0 ^R_Command_to_define:_
    m(m.m &_Read_Q-reg)[2	    !* Ask what character to put it in.!
    f=2
"e 0'
    f=2"e 0'		    !* If he said CR or rubout, don't.!
    q2m(m.m &_Check_Redefinition)  !* Verify that this char is ok to redefine.!
    qLast_Kbd_Macrou2	    !* Redefine it.!
    0

!View Kbd Macro:! !C Print definition of a keyboard macro.
Supply a suffix string argument containing the command name.
If the string argument is null, you will be asked to type
the character which runs the macro.!

    :i*[0			    !* Get the string arg.!
    :i..0 Kbd_Macro_Command:_
    fq0"e m(m.m &_Read_Q-reg)u0'	    !* If null, read character from terminal.!
    q0[1			    !* Get contents of string.!
    m.m ^R_Call_Last_Kbd-q1"e	    !* If it's the ^X^E command,!
      qLast_Kbd_Macrou1	    !* get the macro it would run.!
      :i0Last_Kbd_Macro'
    f[b bind g1		    !* Get the thing in a buffer.!
    j s) 0,.k		    !* Flush the call to & immediate kbd macro.!
    ft
Definition_of_keyboard_macro_0:


    m.m&_Charprint[2
    j z/2< 1a*200.+(2c0a) m2 ft_>
    ft

    0

!& Check Redefinition:! !S Verify that a certain command can be redefined.
Do not allow a command to be redefined unless it is undefined,
self-inserting, or a string starting with Temp.
The command is specified with a q-register name in a string
passed as a string pointer.!

    [1
    q1[0			    !* Q0 gets old definition.!
    fq0+1"g			    !* If old definition is a string not made by this macro,!
      f~(0,6:g0)!Temp!"n	    !* don't let user clobber useful command.!
!lose!  !"! :I*Can't_clobber_specified_character_1 fs err''
    "# Afs^r init-q0"n
         200.@ fs^rinit-q0"n	    !* Don't redefine built-ins except error and self-insert.!
	   q0"n			    !* Undefined slots in dispatch prefix are 0.!
	     o lose''''
    

!^R Kbd Macro Query:! !^R Query and continue macro execution.
If called from a macro, reads a character:
Space continues execution.
Rubout terminates this repetition of the macro.
Altmode terminates all repetitions of the macro.
. terminates after the end of this repetition of the macro.
^R enters a recursive edit;  when you exit, you are asked again.
^L clears the screen and asks you again.
Anything else exits all macros and is reread as a command.!

    fs tyi source"e 0'	    !* if not from inside macro, do nothing!
    [0[1 [..j :i..j Kbd_Macro_Query
    0f[ tyi source 0f[ tyi sink
    !Read! 
    2,m.i @:fiu1 fiu0		    !* get character, really from tty!
    q0-"e f+ Oread'
    q0-"e 0 Oread'
    -2fsqpun			    !* pop tyi source and tyi sink!
    q0-32"e 0'		    !* space continues on!
    q0-."e 1u:..m(fq..m/5-1) 0' !* . ends after this, set rpt count to 1.!
    q0-"e 1u:..m(fq..m/5-1)'	    !* For Altmode, set rpt count to 1 so flush all repeats.!
    q0f:"l		    !* Both Rubout and Altmode end this repetition!
      fq:..m(fq..m/5-3)-2	    !* by skipping up to the last char
! u:..m(fq..m/5-2)
      fi '			    !* and reading it, causing macro to be popped.!
    0fs tyi source		    !* Other characters quit macro execution!
    q1fs reread		    !* and are unread.!
