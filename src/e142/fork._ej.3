(W
[0+8+FQ(+4)[1
0FO10F"G+Q1
'W+FQ()+4U1
FQ1"L0'
,Q1:M(Q1+4(]1]0))
  m6BSW#hw[bJT?F6<& Setup FORK Library!:i*Fork EXECm.VLastfork
0Fork1f[noquit
[2[30[4[..o
fFork name: :FCU2
fq2"EQLastforku3
q3"E@FTLast fork was killed
''
"#:i3Fork 2'
@ft 
f~3Fork EXEC"N
FF"N0fo..q3f"N,0fz'0M.V3
5,fq3:g3u2'
0FO..Q3f"NU4
q4fz'"#
1:<fz<SUBSYS>2.SAVu4>"N
1:<fz<USESYS>2.SAVu4>"N
1:<fz2.SAVu4>"N
fshsname[1
fz<1>2.SAVu4]1'''
q4M.V3'
'"#fz
:i3Fork EXEC'
q3uLastfork'
0	KForkE1f[noquit
[2[3[..o
fHandle name: :FCu2
q2"E'
fq2"N:i2Fork 2'"#
QLastforku2
Q2"E@FTLast fork already killed
'
@FTKill 21M(M.M& Yes or No)"E'''
f~2Fork EXEC"E
@FTCannot kill the EXEC fork!'
0FO..Q2u3
q3"E@FTNo such fork'
q3,0fz
0u2
qLastfork"N
F=Lastfork2"E0uLastfork''
0~Filename~FORK~DOC~ ~Filename~(Command to go to an inferior fork.
~DOC~ & Setup FORK Library*S Initialize for handling inferiors.
~DOC~ ForkC Invoke an inferior process.
Takes as string argument the name of the program to invoke.  If a
fork by that name already exists, it is resumed.  If given an
argument, kills the fork and restarts it.  Name defaults to the last
fork run.  We look for the program on <SUBSYS>, <USESYS>, your
connected directory, and your login directory, in that order.  Use
KFork command to kill the fork.
~DOC~ KForkrC Kill an inferior process.
Follow command with the name of the fork to kill.
No name kills last fork run.
~DIRECTORY~'& Setup FORK Library
Fork
KFork
~INVERT~[1<Q1-1U1Q1FP;>Q1
