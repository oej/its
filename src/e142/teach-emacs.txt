Things to put in:
Lesson 2:
   Mode line, searching, point/mark already in. What else?
Lesson 3:
   Need Init files, Two window mode, buffers descriptions. What else?
   Autosave mode

DOCOND declarations for operating-system dependencies:
{Alternatives:ITS,Tops20,Sumex}
{Flag:?Sumex}
{Flag:?ITS}
{Flag:?Tops20}
{Replace:+ITS=>C-Z->C-C}
{Replace:+ITS=><Esc>-><Alt>}
{Replace:+ITS=><delete>-><Rubout>}
{end}
You are looking at the EMACS tutorial.  Comments should be sent to
Rubenstein@Sumex-AIM and McLure@SRI-KL.

EMACS commands are generally prefixed by the CONTROL key or the META
(EDIT on datamedias) key (<ESC> if you don't have META or EDIT on your
keyboard).  Rather than write out META or CONTROL each time we want
you to prefix a character, we'll use the following abbreviations:

 C-<char>	means hold the CONTROL key down and type a character.
 M-<char>    	means hold the META key down while typing a character.
		if you don't have a META or EDIT key, then type <ESC>,
		release it, then type the character.

Thus, C-F would be hold the control key and type F.  You will often
be asked to type characters to see how they work; don't actually do
this, however, until you see >> at the left of the screen.  For instance:
<<Blank lines inserted here by startup of TEACH-EMACS>>
>>  Now type C-V (View next screen) to move to the next screen.
	(go ahead, do it by depressing the control key and V together).
	From now on, you'll be expected to do this whenever you finish
	reading the screen.

Note that there is an overlap when going from screen to screen; this
provides some continuity when moving through the file.

The first thing that you need to know is how to move around from place
to place in the file.  You already know how to move forward a screen,
with C-V.  To move backwards a screen, type M-V (depress the META or
EDIT key and type V, <ESC>V if you don't have a META or EDIT key}).

>>  Try typing M-V and C-V to move back and forth a few times.

SUMMARY
-------

The following commands are useful for viewing screenfuls:

	C-V	View next screenful
	M-V	View previous screenful
	C-L	'Refresh' the current screen.

>> Try C-L now.  (You'll notice that it centers the screen where
   the cursor currently is.  If this happens to move this text off the
   screen, just do C-V's or M-V's to see it again.) Do a C-L for refresh.

BASIC CURSOR CONTROL
--------------------

Getting from screenful to screenful is useful, but how do you
reposition yourself within a given screen to a specific place?
There are several ways you can do this.  One way (not the best, but
the most basic) is to use the commands previous, backward, forward
and next.  As you can imagine these commands (which are given to
EMACS as {+Sumex:M-^, M-<, M->, M-<lf>}{-Sumex:C-P, C-B, C-F, and C-N} respectively) move the cursor from
where it currently is to a new place in the given direction.  {-Sumex:Here,
in a more graphical form are the commands:
 
			  Previous line, C-P
				  :
				  :
   Backward, C-B .... Current cursor position .... Forward, C-F
				  :
				  :
			  Next line, C-N

You'll probably find it easy to think of these by letter.  P for
previous, N for next, B for backward and F for forward.  These are
the basic cursor positioning commands and you'll be using them ALL
the time so it would be of great benefit if you learn them now.
}{+Sumex:Note
that these commands are placed in the logical place on the Datamedia
keypad.}

>> Try doing a few {-Sumex:C-N}{+Sumex:M-<lf>}'s to bring the cursor down to this line.
   Move into the line with {-Sumex:C-F}{+Sumex:M->}'s and up with {-Sumex:C-P}{+Sumex:M-^}'s. Now use
   these four commands to play around a little. Try moving off
   the top of this screen and see what happens.

When you go off the top or bottom of the screen, the text beyond
the edge is shifted onto the screen so that your instructions can
be carried out while keeping the cursor on the screen.

A faster way to move around is to move by words or even entire
sentences.   Here is a summary of simple cursor moving operations
including the word and sentence moving commands:

	{-Sumex:C-F}{+Sumex:M->}	Move forward a character
	{-Sumex:C-B}{+Sumex:M-<}	Move backward a character

	M-{-Sumex:F}{+Sumex:)}		Move forward a word
	M-{-Sumex:B}{+Sumex:(}		Move backward a word

	{-Sumex:C-N}{+Sumex:M-<lf>}	Move to next line
	{-Sumex:C-P}{+Sumex:M-^}	Move to previous line

	{-Sumex:C-A}{+Sumex:M-<esc> M-<}	Move to beginning of line
	{-Sumex:C-E}{+Sumex:M-<esc> M->}	Move to end of line

	{-Sumex:M-A}{+Sumex:M-<esc> M-(}	Move back to beginning of sentence
	{-Sumex:M-E}{+Sumex:M-<esc> M-)}	Move forward to end of sentence

	M-{-Sumex:<}{+Sumex:{*Brace:}}	Go to beginning of file
	M-{-Sumex:>}{+Sumex:}}	Go to end of file
{+Sumex:

Just as the <esc> key means "Add the EDIT key to the next command,"
typing M-<esc> or <esc><esc> means "Add both the EDIT and the CONTROL
keys to the next command."  Generally, if C-A does something, M-A will
do it bigger, and C-M-A will do it even bigger.

}
>> Try all of these commands now a few times for practice.
   Since the last two will take you away from this screen,
   you can come back here with M-V's and C-V's.  These are
   the most often used commands.

Like all other commands in EMACS, these commands can be given
arguments which cause them to be executed repeatedly.  The way you
give arguments is by prefixing  with M-<number> or C-U<number>.  For
instance,  C-U 12 C-V scrolls forward twelve lines, and M-8
M-{+Sumex:)}{-Sumex:F} moves forward eight words.  Use whichever of
these methods is more convenient for you.

>> Try giving a suitable argument to {-Sumex:C-N or C-P}{+Sumex:M-^ or M-Lf} to come as close
   as you can to this line in one jump.

The only apparent exception to this is the screen moving commands,
C-V and M-V.  When given an argument, they scroll the screen up or
down by that many lines, rather than screenfuls.  This proves to be
much more useful.

>> Try typing M-8 C-V now.

Did it scroll the screen up by 8 lines?  If you would like to
scroll it down you can give an argument to M-V.


INSERTING AND DELETING
----------------------

If you want to type text, just do it.  Characters which you can see,
such as A, 7, *, etc. are taken by EMACS as text and inserted
immediately.  You can delete the last character you typed by doing
<Delete>.  More generally, <Delete> will delete the character immediately
before the current cursor position.

>> Do this now, type a few characters and then delete them
   by typing <Delete> a few times.

Remember that most EMACS commands can be given a repeat count;  Note
that this includes characters which insert themselves.

>>  Try that now -- type M-8 * and see what happens.

You've now learned the most basic way of typing something in
EMACS and correcting errors.  You can delete by words or lines
as well.  Here is a summary of the delete operations:

	C-D   	     delete the next character after the cursor
	<Delete>     delete the character just before the cursor
	M-D	     kill the next word after the cursor
	M-<Delete>   kill the word immediately before the cursor
	C-K	     kill from the cursor position to end of line

Note that C-K kills text ONLY TO THE RIGHT of the cursor;  if you put
the cursor in the middle of the line, C-K will delete the right half
of the line.  Another C-K will delete the CRLF and join the next line
to the end of the current one.

Now suppose you kill something, and then you decide that you want to
get it back?  Well, whenever you kill something bigger than a
character, EMACS saves it for you.  To yank it back, use C-Y.  Note
that you don't have to be in the same place to do C-Y;  This is a
good way to move text around.  Also note that the difference between
"Killing" and "Deleting" something is that "Killed" things can be
yanked back, and "Deleted" things cannot.

For instance, type {-Sumex:C-N}{+Sumex:M-Linefeed} a couple of times to
postion the cursor at some line on this screen.{*Refill:}

  >> Do this now, move the cursor and kill that line with C-K.

Note that a single C-K will kill the contents of the line, and a
second C-K will delete the line itself, and make all the other lines
move up.  If you give C-K a repeat count, it will delete that many
lines AND their contents.

The text that has just disappeared is saved so that you can retrieve
it.  To retrieve the last killed text and put it where the cursor
currently is type C-Y.

 >> Try it; type C-Y to yank the text back.

Think of C-Y as if you were yanking something back that someone took
away from you.  Notice that if you do several C-K's all at once the
text that is killed is all saved for you so that if you  want it back
you can yank it back.

 >> Do this now, type C-K several times.

Now to retrieve that killed text:

 >> Move the cursor down a few lines and type C-Y to retrieve the
	lines that you killed.  This is how you move text from place
	to place.  You can even make copies of a line by killing it
	and yanking it back as many times as you want. Remember
	that when you have just killed text, it stays with you so
	that if you move your cursor elsewhere in the text and
	then C-Y to yank back the killed text, you will have 
	a method for moving text around in a file.

EXTENDING THE COMMAND SET
-------------------------

There are many, many more EMACS commands than could possibly be put
on all the control and meta characters.  EMACS gets around this with
the X (eXtend) command.  This comes in three flavors:

	C-X	Character eXtend
	M-X	Named command eXtend
	{-Sumex:M-<esc>}{+Sumex:C-M-X}	TECO extend

These are commands that are generally useful but used less than the
commands you have already learned about.  As an example, one command
that is used infrequently is the command to tell EMACS that you'd
like to stop editing.  The command to do this is C-X C-Z.{-ITS:  Think of
it as Z for zapping yourself.}

There are many C-X commands.  The ones you need immediately are:

	C-X C-V		Visit file.  This is how you read in a file
			to edit it.  When you type this, EMACS asks
			you for a file name to visit.  You would respond
			with the name of the file.  Then EMACS brings it
			in for editing.  If the file doesn't exist, then
			EMACS assumes that you are creating a new file.
	C-X C-S		Save file.  This is a command that tells EMACS
			to save the file you are currently looking at
			onto disk.  It is recommended you give this
			ocassionally to prevent losing any work in the
			case of a system crash.
	C-X C-Z		Quit EMACS.  This does NOT automatically save your
			file.  If given any argument, it will save your
			file before exiting.  Thus, the standard way to
			save and exit is C-U C-X C-Z.  If you don't like
			this, there is a way to have EMACS save your buffer
			at frequent intervals and when you exit.  This is
			called "Auto Save Mode", and is explained below.

Named eXtend commands are commands which are used even less
frequently, or commands which are used only in certain modes.  An
example of this type of command is the Replace command.  When you type
M-X, EMACS will prompt you at the bottom of the screen with MM (EMACS
calls named eXtend commands MM commands) and then you can type the
name of the command you want to execute, in this case, "Replace
String".  Just type "REP<esc>" and EMACS will complete the command.
Then you type the string that you want to replace, an <esc>, the
string you want to replace it with, and a return.

 >> Try this now;  type M-X rep<esc>try<esc>you can do<return>
	See how the previous line changed?  All the "try"s were
	changed to "you can do"

The last kind of extend command is the TECO extend.  If you type
{+Sumex:C-M-X}{-Sumex:M-<esc>}, then you can type TECO commands,
terminated with <esc><esc>.  You probably will never have to use this,
but it's there if you do.{*Refill:}


CONCLUSION
----------

This is the end of the first lesson in Teach{-ITS:-}Emacs.  You now
know all the commands that you really need to edit a file.  To learn
some more about Searching, doing things with arbitrary regions of
text, special context oriented commands relating to paragraphs, pages,
LISP S-expressions or lists, you should run Teach{-ITS:-}Emacs
again and go through the intermediate lesson.  For now, you ought to
get some practice editing files.{*Refill:}
In this lesson, you will learn about some of the additional things
that EMACS can help you do.  If you need to review what was in the
previous lesson, please do so.  This lesson is an intermediate level
description of some more advanced and useful features.

MODE LINE
---------

If EMACS sees that you are typing commands slowly it shows them to you
at the bottom of the screen in an area called the echo lines.  This is
just the last few lines at the bottom.  The line immediately above
these is called the MODE LINE.  You may notice that it begins with
EMACS (Fundamental) ...more stuff...  This is a very useful
'information' line.  To understand EMACS it is best to consider that
it operates in a variety of modes.  The default mode is Fundamental
which is what you are in now.  There are modes for editing different
languages and text, such as LISP mode, Text mode, etc.  The mode line
serves to show you various things about your current state.  For
instance, on the mode line here you'll notice that it says Main.
EMACS operates with things called buffers.  This is a place that it
puts your file while you are editing it.  There are names for buffers.
The default buffer upon startup of EMACS is Main.  You'll notice that
after the Main comes the filename
{-ITS:DSK:<your-directory>TEACH-EMACS.TUTORIAL}{+ITS:your-directory;
machine: TEACH TEXT}.  This is the name of your own temporary copy of
the text of the EMACS tutorial; the file you are now visiting.
After the name of the file comes --64%--.  This indicates that you are
64% of the way through the file.  When you are at the top or the
bottom of the file, EMACS will say --TOP-- or --BOT--, respectively.{*Refill:}


SEARCHING
---------

EMACS can do searches for strings (these are groups of contiguous
characters or words) either forward through the file or backward
through it.  To search for the string means that you are trying to
locate it somewhere in the file and have EMACS show you where the
occurences of the string exist.  EMACS searches are somewhat different
from what you may be familiar with.  The usual search is called
"Incremental Search" -- it is performed as you type in the thing to
search for.  The command to inititate an incremental search is C-S for
forward search, and C-R for reverse search.  BUT WAIT!  Don't do them
now.  When you type C-S you'll notice that the mode line changes to
'I-Search' and below it you get 'Search:' This tells you that EMACS is
in incremental search mode, waiting for you to type the thing that you
want to search for.{*Refill:}

>>  Now type C-S to start a search.  SLOWLY, one letter at a time,
	type the word 'cursor', pausing after you type each
	character to notice what happens to the cursor.

Did you see what happened?  EMACS, in an incremental search, tries
to go to the occurence of the string that you've typed out so far.
To go to the next occurence of 'cursor' just type C-S again.  If no
such occurence exists EMACS beeps and tells you that it is a failing
search.  To get out of Incremental Search Mode, type any EMACS command
except C-Q, C-R or C-S.  C-Q can be used to "quote" control characters
so that you can include them in search strings.  C-S and C-R repeat
the search in the specified direction.{*Refill:}

If you are in the middle of an incremental search and type <Delete>,
you'll notice that the last character in the search string is erased
and the search backs up to the previous occurence of that string.  For
instance, suppose you currently have typed 'cu' and you see that your
cursor is at the first occurence of 'cu'.  If you now type <Delete>,
the 'u' on the search line is erased and you'll be repositioned in the
text to the occurence of 'c' immediately before the first 'cu'.  This
provides a useful means for backing up while you are searching.{*Refill:}

The C-S starts a search that looks for any occurence of the search
string AFTER the current cursor position.  But what if you want to
search for something earlier in the text?  To do this one should type
C-R for Reverse search.  Everything that applies to C-S applies to C-R
except that the direction of the search is reversed.{*Refill:}


POINT, MARK and REGION
----------------------

Another useful facility would be the ability to perform editing
operations on arbitrary regions of text within the buffer.  In EMACS,
this facility is available in the form of many commands which operate
on "the region" or "between point and mark."  "Point" is simply where
the cursor currently is (cf. the assembly language programmer's "."
meaning the current location).  The "mark" is another place in the
file that, for some reason, EMACS is remembering.  This "mark" can be
set in many ways.  The simplest way is for you to give the command
C-@{+Sumex: (That is, <NULL>)}, which places the mark at the current
point.  Also, you may have noticed that after terminating an
Incremental Search, EMACS typed out ^@ in the echo region.  This
indicates that the mark has been set at the point where you started
searching.  This mark is not set (and ^@ is not typed out) if you
didn't move very far in your search.

Suppose you moved the cursor to the beginning of this line and placed
the mark with the above command and then moved the cursor elsewhere in
the file.  The area between the mark and the point is called the
"region".  This is a very important notion within EMACS.  It enables
one to do wonderous manipulations of text within your buffer, often
doing enormous amounts of work within a very small amount of time.  We
will discuss this region concept at great length.{*Refill:}

At any time, if you want to reassure yourself of where the mark is
currently placed, you can use the C-X C-X (exchange point and mark)
command.  What happens when you give this command is that the point is
relocated to the location of the mark and vice versa.  For instance,
if you had the mark at the beginning of the buffer and the point
somewhere in the middle, you could say C-X C-X and your point would go
to the beginning of the buffer and the mark would be placed in the
middle of the file, where you had just come from.{*Refill:}

 >> Try this;  Move the cursor somewhere on the screen, give the Set
	Mark command ({-Sumex:C-@}{+Sumex:<NULL>}), move the cursor somewhere
	else on the screen, and then give the command C-X C-X.

The following commands are useful for delimiting, manipulating and
performing other various and sundry actions on the region:

    Setting the mark and/or region:
	{+Sumex:<NULL>}{-Sumex:C-@}		Place the mark where the cursor currently is
	C-X C-X		Interchange mark and point.
	M-@		Set mark after end of next word.
	C-<		Set mark at beginning of buffer.
	C->		Set mark at end of buffer.
	M-H		Put region around current paragraph.
	C-X C-P		Put region around current page.
	C-X H		Put region around entire buffer.

    Doing things to the region:
	C-W		Kill region (can be retrieved with C-Y)
	M-W		Copy region (Just puts the region where C-Y
			    can get it later)


TEXT HANDLING COMMANDS
----------------------

There are a number of other commands useful for specialized kinds of
files.  Some of the most general commands are those used to handle
text.  Some of the commands which you have already learned, such as
the sentence handling commands {+Sumex:M-<esc> M-(}{-Sumex:M-A} and
{+Sumex:M-<esc> M-)}{-Sumex:M-E}, are particularly useful for text.  Here
are some others:{*Refill:}

	M-U		Uppercase word -- converts words to all upper case
	M-L		Lowercase word
	M-C		Capitalize word
	C-X C-U		Uppercase region
	C-X C-L		Lowercase region

	M-[		Backwards paragraph
	M-]		Forwards paragraph
	M-H		Mark paragraph
	M-Q		Fill paragraph

	M-G		Fill Region.  Given a positive argument, the fill
			commands will justify too.  A negative argument will
			cause it to remove extra spaces before filling
			(de-justifying).

INIT FILES
----------

Not yet written

MULTIPLE BUFFERS, TWO WINDOW MODE
---------------------------------

Not yet written.

GETTING MORE HELP
-----------------

In this tutorial we have tried to supply just enough information to
get you started using EMACS.  There is so much available in EMACS that
it would be impossible to explain it all here.  However, you may want
to learn more about EMACS since it has numerous desirable features
that you don't know about yet.  EMACS has a great deal of internal
documentation.  All of these commands can be accessed through the HELP
character.  If there is no key labelled "HELP" on your keyboard, you
can type the <HELP> character as {+ITS:C-_ H (two
keystrokes)}{+Sumex:^H}{+Tops20:^_}.  To use the HELP features, type
the <HELP> character, and then a character saying what kind of help
you want.  If you are REALLY lost, type <HELP> ?  and EMACS will tell
you what kinds of help it can give.  The options which are most useful
are the following:{*Refill:}

 	<HELP> C	Character describe.  You type in the character.
			Multi-character commands such as C-X C-Z
			and (if you have no META or EDIT key) <ESC>V
			are also allowed.
	<HELP> D	Describe a named command.  You type in a command.
	<HELP> A	Apropos.  Type in a keyword and EMACS will
			list all the commands containing that keyword.
			More than one keyword can be specified,
			seperated by C-O
	<HELP> I	Run the INFO program.  INFO contains the
			complete documentation for EMACS, in 
			great detail.  Here is where you can find out
			about, for instance, special commands for editing
			LISP code, handling buffers, replacing text, filling
			and justifying text, etc.

 >> Go ahead and try some of these.  Type <HELP> C C-K.  EMACS will tell
	you what that character does.  Try typing <HELP> A WORD to find
	out all the commands that have to do with words.  When EMACS
	prompts you with --MORE--, type a space to see more or a C-L
	to get your text back.  INFO is a fairly sophisticated
	documentation finder and is somewhat complicated.  It probably
	isn't a good idea to try to use INFO just yet. Use EMACS for
	a few days, gain some familiarity and confidence in giving
	commands. And then try INFO out.
                        TV users guide to EMACS
                        -----------------------

This is meant as a tutorial to introduce the veteran TV user to EMACS,
an editor written at MIT.  It has many advantages over TV in terms of
capabilities and flexibility; some of these will be detailed below.  It
also has a few drawbacks, but I think you'll find that the advantages to
be gained are worth it.

In order to get TVUSER EMACS loaded automatically when you start up EMACS
(it's loaded right now, by the way, so this will get you the same EMACS you
are running now), I have copied the file <EMACS>TVUSER.INIT into your
directory as <your-directory>EMACS.INIT.  When EMACS starts up, it will read
in and execute the TECO commands in this file, which will load the TVUSER
library.  The TVUSER library contains many things suggested by and for TV
users who are trying to switch over to EMACS.  Many of the commands are
exactly the same in TVUSER EMACS as in TV.  If in doubt (at least when reading
this file), try it.  You'll learn later how to check what a character does.

>> Go ahead and do [W] to move to the next window.
     You'll be expected to do [W] when necessary to window forward...

The notation used in this document will be pretty much a hodge-podge --
You are certainly familiar with the [X] notation for characters typed
with the EDIT key held down, and with the ^X notation for control
characters.  In EMACS, there is a distinction between control characters
(ascii codes 0-37, 177) and characters with the Control modifier bit
(exactly like the EDIT bit).  This means, for instance, that the
character Control-> is possible in EMACS, althugh it has no ascii
representation.  At MIT, where EMACS was written, and at SU-AI, the
keyboards have two "EDIT" keys, called Control and Meta.  These were
BOTH true modifier bits, so you could meaningfully talk about Control->.
For Tenex and Tops-20 sites, the Meta key is exactly the same as the
EDIT key on Datamedias, and every effort is made to insure that ^X will
have the same effect as C-X.  In EMACS, you will often see the notation
C-X to mean ^X and M-X to mean [X].  Usually a direct translation will
be sufficient, but if you hold down the control key and type ">", for
instance, you will get a Control-uparrow, because Datamedias can only
generate ASCII codes plus the EDIT bit, and C-> is not an ASCII
character.  In any case, M-X may be typed by holding down the edit key
and typing "X", or by typing <ESC> or <ALTMODE> and then typing "X".  ^X
may be typed by either holding down the control key and typing "X" or
typing ^^ (that's control-uparrow) and then typing "X".  There is even
Control-Meta-X, which you type by holding down BOTH the control and edit
keys while typing "X", or typing M-$ (that is, hold down the edit key
and type <ESC> or <ALTMODE>) and then typing "X", or by typing <ESC>
twice and then typing X.  In summary (if you're still with us):

Character	How to type it
---------	--------------
C-X, ^X		Hold down the control key while typing "X"
	     or	Type C-^ (the bottom unlabeled key on DM'S) and then "X"

M-X, [X]	Hold down the "edit" key while typing "X"
	     or	Type <ESC>or <ALTMODE> and then type "X"

C-M-X, [^X]	Hold down both the EDIT and CONTROL keys while typing "X"
	     or	Hold down the EDIT key and type <ESC> X (that is [$X] OR [$]X)
	     or	Type <ESC> twice and then type "X" (That is, $$X)


                 Advantages of EMACS: a quick rundown.
                 -------------------------------------

EMACS permits handling of numerous files at once.  Also permits you to
view two files at once on the same screen for comparison purposes, or to
move text between them.  EMACS has commands for justifying and filling
text, and automatically breaking long lines on typein ("autofill" mode).

EMACS has good self-documentation.  You can find out what any given
command does while in EMACS, or ask for a command that does a certain
thing given a keyword.

It is possible to put any EMACS function on any character.  It is this
ability that permits the TV library described below, and you can further
change even these settings to suit your own preferences.  If you know
TECO (which, unfortunately, tends to be incomprehensible to all but MIT
hackers), you can extend the command set almost arbitrarily.

EMACS processes input and screen updating asynchronously, hence often is
much better about not writing more than it needs to; TVEDIT makes you
wait for display to be completed before obeying the next command.  E.g.
if you type two window commands in quick succession in TV, it will
completely display the first before moving on to the second.  In EMACS,
as soon as it has processed the second command it knows you want to see
a different window, and it will stop writing the first one and go right
on to the second.

EMACS has commands for string substitution.


Disadvantages of EMACS, or things TVEDIT does better:
----------------------------------------------------

EMACS does not remember which file you edited last, or where you were
in the file (though you can continue after quitting out of emacs and
your file will still be there; this only applies to starting up EMACS
afresh).

EMACS does not view pages very specially.  Due to some fundamental
limitation, it can't tell you what page it is on, though it can find
pages (i.e. there is a "go to next page" command).  It does not maintain
a directory like TVEDIT does, so locating an arbitrary page in the file
may take longer (I have no data on this; emacs seems as fast as TV in
most operations).  However, there is a library of commands to treat
pages in a manner similar to SU-AI's E editor, called the PAGE library.

While EMACS is smart about your typeahead, it often updates the screen
after changes less than perfectly optimally.  This is usually not a
problem, but can be annoying at times.

EMACS so far has no good commands for refreshing portions of the screen
if your display gets trashed by line noise or system messages.


  Differences that you need to know about between TV and TVUSER EMACS
  -------------------------------------------------------------------

