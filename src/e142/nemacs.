(FILECREATED " 3-Feb-79 15:21:16" <RUBENSTEIN>NEMACS.;11 29497  


     changes to:  START.EMACS

     previous date: "27-Jan-79 17:19:41" <RUBENSTEIN>NEMACS.;9)


(PRETTYCOMPRINT NEMACSCOMS)

(RPAQQ NEMACSCOMS ((FNS * NEMACSFNS)
	(VARS * NEMACSVARS)
	(P (PUTD (QUOTE SUBSYS0)
		 (VIRGINFN (QUOTE SUBSYS))))
	(ADDVARS (ERRORTYPELST
		   (16 (COND ((AND (NEQ (QUOTE NOBIND)
					(GETATOMVAL (QUOTE 
						     EMACS.MAP.FILE)))
				   (EQ (CADR ERRORMESS)
				       EMACS.MAP.FILE))
			      (ERROR "End of EMACS buffer!"))
			     ((AND (NEQ (QUOTE NOBIND)
					(GETATOMVAL (QUOTE 
						    EMACS.TEMP.FILE)))
				   (EQ (CADR ERRORMESS)
				       EMACS.TEMP.FILE))
			      (ERROR "End of EMACS temporary file!")))))
		 )
	(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
		  (ADDVARS (NLAMA)
			   (NLAML)))))

(RPAQQ NEMACSFNS (,, BINARYMODE CF CP CV DISPLAY.IN.ECHO.AND.DIVE DOWN 
		     DUMP.SCREEN DUMPX DUMPX1 DWN E! E. 
		     EDIT.DRIBBLE.FILE EMACS. EMACS.?= EMACS.GETDEF 
		     EMACS.P EMACS.PP EMACS.RETURN 
		     ENABLE.CONTROL.C.CAPABILITY FLUSH.EMACS 
		     GET.EMACS.BUFFER HK INFO MAKE.QUOTE MAP.BYTES 
		     MAP.PROCESS.TO.FILE PAGE.OF.BYTE PUTSTRING READ.AC 
		     SET.EMACS.VARS SETUP.FANCY.DRIBBLE SFCOC 
		     START.EMACS STIW SUBSYS1 SUBSYS2 TECO WRITE.RSCAN))
(DEFINEQ

(,,
  [LAMBDA (X Y)
    (LOGOR (LLSH X 18)
	   Y])

(BINARYMODE
  [LAMBDA NIL
    (JSYS 72 65 (LOGAND (LOGXOR (LLSH 1 6)
				-1)
			(JSYS 71 65 NIL NIL 2)))

          (* We turn off B29 in the JFN Mode Word of the 
	  current output device. If the user is in ASCII mode,
	  this puts him in Binary mode, which is what is 
	  required by EMACS.)


    NIL])

(CF
  [LAMBDA (NAME)

          (* Gets the definition of a function and dives down 
	  to EMACS. Like Teitelman's EDITF, CF uses LASTWORD 
	  if given NIL. The unbroken, unadvised version of the
	  function is obtained. If the function is compiled, 
	  we check first for an EXPR. Otherwise we try to get 
	  it from the first file that contains it.)


    (EMACS.GETDEF NAME])

(CP
  [LAMBDA (X)

          (* Like EDITP, it dives down to EMACS with the 
	  property list of a litatom to edit.)


    (COND
      ((NULL X)
	(SETQ X LASTWORD)
	(PRINT LASTWORD T)))
    (COND
      ((AND X (LITATOM X))
	(PRIN3 "(SETPROPLIST " EMACS.TEMP.FILE)
	(PRIN4 (KWOTE X)
	       EMACS.TEMP.FILE)
	(SPACES 1 EMACS.TEMP.FILE)
	(DUMPX (LIST (QUOTE QUOTE)
		     (GETPROPLIST X)))
	(PRIN3 ")

" EMACS.TEMP.FILE)
	(DOWN))
      (T (ERROR "No editable property list:  " X])

(CV
  [LAMBDA (X)

          (* Like EDITV, it dives down to EMACS with the value
	  of a variable to edit.)


    (COND
      ((NULL X)
	(SETQ X LASTWORD)
	(PRINT LASTWORD T)))
    (COND
      ((NEQ (GETTOPVAL X)
	    (QUOTE NOBIND))
	(PRIN3 "(RPAQQ " EMACS.TEMP.FILE)
	(PRIN4 X EMACS.TEMP.FILE)
	(SPACES 1 EMACS.TEMP.FILE)
	(DUMPX (GETTOPVAL X))
	(PRIN3 ")

" EMACS.TEMP.FILE)
	(DOWN))
      (T (ERROR X " has no value."])

(DISPLAY.IN.ECHO.AND.DIVE
  [LAMBDA (LIST)
    (PRIN3 "MM^R Two Windows
MMSELECT BUFFERPRINT
HK
I" EMACS.TEMP.FILE)
    (PRIN3 (APPLY (FUNCTION CONCAT)
		  LIST)
	   EMACS.TEMP.FILE)
    (PRIN3 

"
0J
QWINDOW 2 SIZE-3%"N 3-QWINDOW 2 SIZEMM^R GROW WINDOW'
MM^R OTHER WINDOW
MM& MULTI-WINDOW REFRESH"
	   EMACS.TEMP.FILE)
    (RETEVAL (QUOTE DOWN)
	     (QUOTE (DOWN T])

(DOWN
  [LAMBDA (NEGATE.ARG.FLG)

          (* This is the main function of the EMACS interface 
	  for diving down to EMACS. Once START.EMACS has been 
	  called, DOWN may be called at any time to enter 
	  EMACS. Meta-z will exit from EMACS and return to 
	  down. When DOWN invokes EMACS, it passes to EMACS a 
	  number whose absolute value is the current file 
	  pointer of the file EMACS.TEMP.FILE.
	  The number is passed to a teco macro in FSSUPERIOR
	  which is invoked when the EMACS gains control.
	  If the argument to DOWN is NIL, then the current 
	  file pointer is passed and EMACS simply inserts the 
	  text at the end of the buffer.
	  If DOWN is given the argument T, then the negative 
	  of the current file pointer is passed.
	  EMACS takes a negative number to be the instruction 
	  to insert that much text, put it into q-register a, 
	  delete the text and macro A.
	  Thus, if you simply want to insert some text into 
	  the EMACS buffer, just print that text into 
	  EMACS.TEMP.FILE and call (DOWN). But if you want a 
	  fancier event to occur when EMACS gains control, 
	  then print teco code to EMACS.TEMP.FILE and then 
	  call (DOWN T).)


    (PROG (TEMP)
          (SETQ TEMP (GETFILEPTR EMACS.TEMP.FILE))
          (CLOSER EMACS.ARG.LOC (COND
		    (NEGATE.ARG.FLG (IMINUS TEMP))
		    (T TEMP)))

          (* EMACS.ARG.LOC is a location in a page of lisp 
	  that is identical to the spot that FSSUPERIOR looks 
	  for its argument. See the last few pages of 
	  <INFO>TECORD.)


          (SETFILEPTR EMACS.TEMP.FILE 0)
          (JSYS 41 65 CLEAR.SCREEN.NUMBER)      (* See DUMP.SCREEN.)
          (SETQ LASTEMACS (SUBSYS2 LASTEMACS NIL NIL (QUOTE START)
				   T))
          (GET.EMACS.BUFFER)
      LOOP(COND
	    ((NOT (ZEROP EMACS.EXTRAC))
	      (PRIN1 

"
 Illegal exit from EMACS.  Exit from EMACS only with meta-Z.
 (The gap is not closed.)  Returning to EMACS.
"
		     T)
	      (DISMISS 3000)
	      (SETQ LASTEMACS (SUBSYS2 LASTEMACS NIL NIL NIL NIL))
	      (GO LOOP)))
          (EMACS.RETURN)
          (DUMP.SCREEN DUMP.SCREEN.AMOUNT])

(DUMP.SCREEN
  [LAMBDA (N)
    (PROG (TEMP TEMP1)
          (COND
	    ((AND DISPLAYTERMFLG (EQ (DRIBBLEFILE)
				     FANCY.DRIBBLE.FILE))

          (* We ship out to the terminal a 30, which will 
	  cause the screen to clear. We don't PRIN1 it because
	  we do not want it to get into the dribble file.
	  Then we flash up onto the scrren the last page or so
	  of text that appeared on the screen during LISP.)


	      (JSYS 41 65 CLEAR.SCREEN.NUMBER)
	      (SETQ TEMP (GETEOFPTR FANCY.DRIBBLE.FILE))
	      (SETQ TEMP1 (IDIFFERENCE TEMP N))
	      (COND
		((LESSP TEMP1 0)
		  (SETQ TEMP1 0)))
	      (COPYBYTES FANCY.DRIBBLE.FILE T TEMP1 TEMP])

(DUMPX
  [LAMBDA (X)
    (COND
      ((AND (LISTP X)
	    (EQ (CAR X)
		(QUOTE DEFINEQ))
	    (LISTP (CDR X))
	    (NULL (CDDR X))
	    (LISTP (CADR X))
	    (LISTP (CDADR X))
	    (NULL (CDDADR X)))
	(PRIN3 "(DEFINEQ (" EMACS.TEMP.FILE)
	(PRIN4 (CAADR X)
	       EMACS.TEMP.FILE)
	(PRIN3 " " EMACS.TEMP.FILE)
	(DUMPX1 (CAR (CDADR X)))
	(PRIN3 "))

" EMACS.TEMP.FILE))
      (T (DUMPX1 X])

(DUMPX1
  [LAMBDA (X DEF)

          (* We write X into EMACS.TEMP.FILE using the pretty 
	  print algorithm on <BOYER>PPR.
	  We set the LINELENGTH to 79 because EMACS stupidly 
	  causes wraparound at 80 (instead of 81). The 
	  GETCOMMENT stuff causes lisp comments that are 
	  currently mapped out (because NORMALCOMMENTSFLG is 
	  NIL) to get sent down to EMACS.)


    (RESETFORM
      (LINELENGTH 79)
      (RESETFORM (OUTFILE EMACS.TEMP.FILE)
		 (PROGN (COND
			  [(GETD (QUOTE PPRIND))
			    (PROG ((FORCEIN 1000))
			          (PPRIND X 0 0 (QUOTE (
                                                (* . GETCOMMENT)
							(QUOTE . 
							 MAKE.QUOTE]
			  (T (PROG ((PRETTYPRINTMACROS
				      (CONS (QUOTE (* . GETCOMMENT))
					    PRETTYPRINTMACROS)))
			           (PRINTDEF X 0 DEF])

(DWN
  [LAMBDA NIL
    (SETFILEPTR EMACS.TEMP.FILE 0)
    (PRIN3 "

" EMACS.TEMP.FILE)
    (DOWN])

(E!
  [LAMBDA (N)
    [COND
      ((NUMBERP N)
	(FOR I FROM 1 TO N DO (E.)))
      (T (PROG (OLDLOC)
	   LOOP(SETQ OLDLOC (GETFILEPTR EMACS.MAP.FILE))
	       (WHILE (SYNTAXP (CHCON1 (PEEKC EMACS.MAP.FILE))
			       (QUOTE SEPR)
			       EMACS.READ.TABLE)
		  DO (READC EMACS.MAP.FILE))
	       (COND
		 ((LESSP (GETFILEPTR EMACS.MAP.FILE)
			 (DIFFERENCE EMACS.Z 4))
		   (SETFILEPTR EMACS.MAP.FILE OLDLOC)
		   (E.)
		   (GO LOOP))
		 (T (RETURN]
    (PACKC (QUOTE (8])

(E.
  [LAMBDA NIL

          (* This function is for calling after DOWN has 
	  returned. It causes the lisp sexpression after point
	  in the EMACS buffer to be read and evaluated.
	  Actually, the form is evaluated with LISPXEVAL so 
	  that it becomes (somewhat) undoable, just as if you 
	  had literally typed it into lisp.)


    (PROG (TEMP)
          (SETQ TEMP (PROG ((NORMALCOMMENTSFLG T))
		           (RETURN (READ EMACS.MAP.FILE 
					 EMACS.READ.TABLE))

          (* We must make lisp read in the comments because 
	  text in the buffer is very likely to get deleted or 
	  edited.)


		       ))
          (PROMPTCHAR (QUOTE _)
		      NIL LISPXHISTORY)
          (RESETFORM (PRINTLEVEL (QUOTE (3 . 4)))
		     (PRINT TEMP T))
          (SETQ TEMP (LISPXEVAL TEMP))
          (RESETFORM (PRINTLEVEL (QUOTE (3 . 4)))
		     (PRINT TEMP T))
          (RETURN TEMP))
    (PACKC (QUOTE (8])

(EDIT.DRIBBLE.FILE
  [LAMBDA NIL
    (DRIBBLE (IOFILE (DRIBBLE))
	     T T)
    (PRIN3 "MMSelect BufferDRIBBLE
ER" EMACS.TEMP.FILE)
    (PRIN3 FANCY.DRIBBLE.FILE EMACS.TEMP.FILE)
    (PRIN3 "HK
^A
ZJ
-1MM^R New Window" EMACS.TEMP.FILE)
    (DOWN T])

(EMACS.
  [LAMBDA NIL
    (DUMP.SCREEN DUMP.SCREEN.AMOUNT)
    (RETFROM (QUOTE DOWN)
	     (E.])

(EMACS.?=
  [LAMBDA NIL
    (PROG (NAME)
          [COND
	    ((EQ (SETQ NAME (RATOM EMACS.MAP.FILE EMACS.READ.TABLE))
		 (QUOTE %())
	      (SETQ NAME (RATOM EMACS.MAP.FILE EMACS.READ.TABLE]
          (DISPLAY.IN.ECHO.AND.DIVE
	    (COND
	      [(GETD NAME)
		(CONS
		  NAME
		  (CONS
		    "["
		    (NCONC1
		      [COND
			((NLISTP (ARGLIST NAME))
			  (LIST (ARGLIST NAME)))
			(T (FOR ARGLIST ON (ARGLIST NAME)
			      JOIN (CONS (CAR ARGLIST)
					 (COND
					   ((NULL (CDR ARGLIST))
					     NIL)
					   (T (CONS "," NIL]
		      "]"]
	      (T (LIST "Not a function."])

(EMACS.GETDEF
  [LAMBDA (NAME)                                (* Gets the definition 
						of a litatom, as 
						described in CF.)
    (PROG (DEF FILE SPOT MAP WHEREIS)
          (COND
	    ((NULL NAME)
	      (SETQ NAME LASTWORD)
	      (PRINT LASTWORD T)))
          (SETQ DEF (VIRGINFN NAME))
          [COND
	    ((LISTP DEF)
	      (DUMPX (LIST (QUOTE DEFINEQ)
			   (LIST NAME DEF)))
	      (RETURN (DOWN]
          [COND
	    ((GETP NAME (QUOTE EXPR))
	      [DUMPX (LIST (QUOTE DEFINEQ)
			   (LIST NAME (GETP NAME (QUOTE EXPR]
	      (RETURN (DOWN]
          (COND
	    [(SETQ FILE (CAR (WHEREIS NAME)))
	      [COND
		[(SETQ MAP (GETP FILE (QUOTE FILEMAP]
		(T (LOADFNS NIL (CDAR (GETP FILE (QUOTE FILEDATES)))
			    T NIL)
		   (SETQ MAP (GETP FILE (QUOTE FILEMAP]
	      (COND
		([SETQ SPOT (ASSOC NAME
				   (CDDR (CADADR (GETP FILE
						       (QUOTE FILEMAP]
		  [SETQ FILE (CDAR (GETP FILE (QUOTE FILEDATES]
		  (PRINT FILE T)
		  (PRIN3 "[0E[FNE]ZJ.U0
I(DEFINEQ " EMACS.TEMP.FILE)
		  (PRIN3 "ER" EMACS.TEMP.FILE)
		  (PRIN3 FILE EMACS.TEMP.FILE)
		  (PRIN3 "
" EMACS.TEMP.FILE)
		  (PRIN3 (CADR SPOT)
			 EMACS.TEMP.FILE)
		  (PRIN3 "FSIFACCESS" EMACS.TEMP.FILE)
		  (PRIN3 (DIFFERENCE (CDDR SPOT)
				     (CADR SPOT))
			 EMACS.TEMP.FILE)
		  (PRIN3 
	  "FY
I)


0FSDVERSION
Q0J
.,ZFSBOUNDARIES
F+
0:F
:F
"
			 EMACS.TEMP.FILE)
		  (RETURN (DOWN T)))
		(T (ERROR "No Definition Found For" NAME]
	    (T (ERROR "No Definition Found.  " NAME])

(EMACS.P
  [LAMBDA NIL
    (PRIN3 "MM^R Two Windows
MMSELECT BUFFERPRINT
HK
I" EMACS.TEMP.FILE)
    (PROG ((PLVLFILEFLG T))
          (RESETFORM (PRINTLEVEL EMACS.P.PRINT.LEVEL)
		     (PRIN3 (PROG ((NORMALCOMMENTSFLG T))
			          (RETURN (READ EMACS.MAP.FILE 
						EMACS.READ.TABLE)))
			    EMACS.TEMP.FILE)))
    (PRIN3 

"
0J
QWINDOW 2 SIZE-3%"N 3-QWINDOW 2 SIZEMM^R GROW WINDOW'
MM^R OTHER WINDOW
MM& MULTI-WINDOW REFRESH"
	   EMACS.TEMP.FILE)
    (RETEVAL (QUOTE DOWN)
	     (QUOTE (DOWN T])

(EMACS.PP
  [LAMBDA NIL
    (SETFILEPTR EMACS.MAP.FILE EMACS.BEGV)
    [PROG (OLDLOC TEMP (NORMALCOMMENTSFLG T))
      LOOP(SETQ OLDLOC (GETFILEPTR EMACS.MAP.FILE))
          (WHILE (SYNTAXP (CHCON1 (PEEKC EMACS.MAP.FILE))
			  (QUOTE SEPR)
			  EMACS.READ.TABLE)
	     DO (READC EMACS.MAP.FILE))
          (COND
	    ((LESSP (GETFILEPTR EMACS.MAP.FILE)
		    (DIFFERENCE EMACS.Z 4))
	      (SETFILEPTR EMACS.MAP.FILE OLDLOC)
	      (SETQ TEMP (NLSETQ (READ EMACS.MAP.FILE EMACS.READ.TABLE))
		)
	      (COND
		[(NULL TEMP)
		  (PRIN1 "Unbalanced Sexpression!
" T)
		  (DISMISS 3000)
		  (SETFILEPTR EMACS.TEMP.FILE 0)
		  (RETEVAL (QUOTE DOWN)
			   (QUOTE (DOWN]
		(T (DUMPX (CAR TEMP))
		   (TERPRI EMACS.TEMP.FILE)
		   (TERPRI EMACS.TEMP.FILE)))
	      (GO LOOP))
	    (T (RETEVAL (QUOTE DOWN)
			(QUOTE (DOWN]
    (PACKC (QUOTE (8])

(EMACS.RETURN
  [LAMBDA NIL
    (EVAL (CDR (SASSOC EMACS.FSEXIT.ARG EMACS.RETURN.ALIST])

(ENABLE.CONTROL.C.CAPABILITY
  [LAMBDA NIL
    (JSYS 105 OURPROCESS 0 (,, 131072 0])

(FLUSH.EMACS
  [LAMBDA NIL

          (* This function gets rid of the EMACS fork and 
	  closes the 3 files that EMACS uses.)


    [COND
      ([FIXP (CAR (GETATOMVAL (QUOTE LASTEMACS]
	(KFORK (CAR (GETATOMVAL (QUOTE LASTEMACS]
    (COND
      ((AND (NEQ (QUOTE NOBIND)
		 (GETATOMVAL (QUOTE EMACS.MAP.FILE)))
	    (LITATOM EMACS.MAP.FILE)
	    (OPENP EMACS.MAP.FILE))
	(CLOSEF EMACS.MAP.FILE)))
    (COND
      ((AND (NEQ (QUOTE NOBIND)
		 (GETATOMVAL (QUOTE EMACS.TEMP.FILE)))
	    (LITATOM EMACS.TEMP.FILE)
	    (OPENP EMACS.TEMP.FILE))
	(CLOSEF EMACS.TEMP.FILE)))
    (COND
      ((AND (NEQ (QUOTE NOBIND)
		 (GETATOMVAL (QUOTE FANCY.DRIBBLE.FILE)))
	    (LITATOM FANCY.DRIBBLE.FILE)
	    (OPENP FANCY.DRIBBLE.FILE))
	(DRIBBLE NIL)))
    (NLSETQ (RELBLK (VAG OUR.BLOCK.START)
		    EMACS.BLK.SIZE))
    (NLSETQ (RELBLK (VAG EMACS.AC.BLK.START)
		    1])

(GET.EMACS.BUFFER
  [LAMBDA NIL

          (* We assume we have just returned from EMACS and 
	  that the gap has been closed 
	  (with 1F?). We find out where the beginning and end 
	  and point of the current buffer are and we make sure
	  that every page of the buffer is mapped into 
	  EMACS.MAP.FILE so we can read it with lisp READ.)


    (SET.EMACS.VARS)
    (MAP.BYTES EMACS.BEG EMACS.Z)
    (COND
      ((GREATERP EMACS.Z EMACS.MAP.FILE.EOF)
	(SETFILEPTR EMACS.MAP.FILE EMACS.Z)
	(SETQ EMACS.MAP.FILE.EOF EMACS.Z)))
    (SETFILEPTR EMACS.MAP.FILE EMACS.PT])

(HK
  [LAMBDA NIL
    (TECO "HK"])

(INFO
  [LAMBDA NIL
    (TECO "MMINFO"])

(MAKE.QUOTE
  [LAMBDA (X)
    (COND
      ((AND (LISTP (CDR X))
	    (LITATOM (CADR X))
	    (NULL (CDDR X)))
	(PACK* (QUOTE ')
	       (CADR X)))
      (T (CONS (QUOTE QUOTE)
	       (CDR X])

(MAP.BYTES
  [LAMBDA (START END)
    (FOR I FROM (PAGE.OF.BYTE START) TO (PAGE.OF.BYTE END)
       DO (COND
	    ((MEMBER I MAPPED.PAGES))
	    (T (MAP.PROCESS.TO.FILE (CAR LASTEMACS)
				    I EMACS.MAP.FILE.JFN)
	       (SETQ MAPPED.PAGES (CONS I MAPPED.PAGES])

(MAP.PROCESS.TO.FILE
  [LAMBDA (PROCESS PAGE JFN)

          (* We make a page of PROCESS to a page of 
	  EMACS.TEMP.FILE and then map it back into the 
	  process. Future changes to the process page or file 
	  page affect the other (immediately).)


    (JSYS 46 (,, PROCESS PAGE)
	  (,, JFN PAGE)
	  (,, 61440 0))
    (JSYS 46 (,, JFN PAGE)
	  (,, PROCESS PAGE)
	  (,, 61440 0])

(PAGE.OF.BYTE
  [LAMBDA (BYTE)
    (PROG (QUO REM)
          (SETQ QUO (IQUOTIENT BYTE 5))
          (SETQ REM (IREMAINDER BYTE 5))
          (RETURN (LLSH (COND
			  ((ZEROP REM)
			    (ADD1 QUO))
			  (T QUO))
			-9])

(PUTSTRING
  [LAMBDA (STR ADDR)

          (* We write the bytes in STR starting a ADDR 5 bytes
	  (of 7 bits each) to a word with a 0 bit at the end.
	  We make sure that a 0 byte is added at the end.
	  In fact, the last word ends with 0 bytes.)


    (UNTIL (GREATERP CHAR (ADD1 (NCHARS STR))) BIND LOC
       FIRST (SETQ LOC ADDR) BIND WORD BIND CHAR FIRST (SETQ CHAR 1)
       DO (SETQ WORD 0)
	  (FOR J FROM 1 TO 5
	     DO (SETQ WORD (LLSH WORD 7))
		[SETQ WORD (LOGOR WORD
				  (COND
				    ((GREATERP CHAR (NCHARS STR))
				      0)
				    (T (CHCON1 (NTHCHAR STR CHAR]
		(SETQ CHAR (ADD1 CHAR)))
	  (CLOSER LOC (LLSH WORD 1))
	  (SETQ LOC (ADD1 LOC)))
    ADDR])

(READ.AC
  [LAMBDA (ACN PROCESS)
    (JSYS 113 PROCESS EMACS.AC.BLK.START)
    (OPENR (LOGOR EMACS.AC.BLK.START ACN])

(SET.EMACS.VARS
  [LAMBDA NIL

          (* Sets LISP variables to the contents of the EMACS 
	  buffer block (as documented in <INFO>TECORD).)


    (SETQ EMACS.BEG (OPENR EMACS.BEG.LOC))
    (SETQ EMACS.BEGV (OPENR EMACS.BEGV.LOC))
    (SETQ EMACS.PT (OPENR EMACS.PT.LOC))
    (SETQ EMACS.ZV (OPENR EMACS.ZV.LOC))
    (SETQ EMACS.Z (OPENR EMACS.Z.LOC))
    (SETQ EMACS.EXTRAC (OPENR EMACS.EXTRAC.LOC))
    (SETQ EMACS.MODIFF (OPENR EMACS.MODIFF.LOC))
    (SETQ EMACS.FSEXIT.ARG (READ.AC 3 (CAR LASTEMACS])

(SETUP.FANCY.DRIBBLE
  [LAMBDA NIL

          (* To refresh the screen upon returning to LISP, we 
	  use the dribble file to find out what was recently 
	  typed. We first open the file with IOFILE.
	  Kindly, DRIBBLE lets us get away with that, because 
	  if you first open a dribble file, you can't open it 
	  for read later.)


    (COND
      ((DRIBBLEFILE)
	(SETQ FANCY.DRIBBLE.FILE (CONS NIL NIL)))
      (T [SETQ FANCY.DRIBBLE.FILE (OUTPUT (OUTFILE (QUOTE 
						  LISP.DRIBBLE;-1;T]
	 (CLOSEF FANCY.DRIBBLE.FILE)
	 (IOFILE FANCY.DRIBBLE.FILE)
	 (DRIBBLE FANCY.DRIBBLE.FILE T T])

(SFCOC
  [LAMBDA (TUPLE)
    (PROG1 (LIST (JSYS 74 65 NIL NIL 2)
		 (JSYS 74 65 NIL NIL 3))
	   (COND
	     (TUPLE (JSYS 75 65 (CAR TUPLE)
			  (CADR TUPLE])

(START.EMACS
  (LAMBDA NIL                                   (* edited: 
						" 3-Feb-79 15:20")
    (PROG (TEMP NAME RSCAN.BLK)

          (* When we read from the EMACS buffer, we are sure 
	  (provided we exited with meta z) that the buffer 
	  ends with the sequence space, control-c, double 
	  quote mark, control-c. We set up a read table that 
	  causes an error upon encountering a control-c in the
	  file. The extra control-c and double quote mark 
	  handle the case that we are inside a string read.
	  All this to prevent reading beyond the end of the 
	  emacs buffer. If we could set the eof mark of 
	  EMACS.MAP.FILE, we would. But there is no way we 
	  know to do that. If the buffer had been large, the 
	  eof mark could conceivably been far beyond where the
	  buffer we are reading now ends, and consequently, it
	  is possible that LISP might read a long time before 
	  stopping.)


          (SETQ EMACS.READ.TABLE (COPYREADTABLE FILERDTBL))
          (SETSYNTAX 3 (QUOTE (MACRO IMMEDIATE (LAMBDA (FL RDTBL)
				       (ERROR "End of EMACS buffer!"))))
		     EMACS.READ.TABLE)
          (SETSYNTAX (QUOTE ')
		     (GETSYNTAX (QUOTE ')
				(GETREADTABLE T))
		     EMACS.READ.TABLE)

          (* Since the user will naturally type in single 
	  quote marks, we want them to get turned into 
	  QUOTE's. Unfortunately, INTERLISP does not do that 
	  when reading from a file (with the default 
	  FILEREADTBL.))


          (COND
	    (LASTEMACS (FLUSH.EMACS)))

          (* Our first step is always to get rid of any EMACS 
	  fork and associated files around.)


          (SETQ EMACS.TEMP.FILE (OUTPUT (OUTFILE (QUOTE EMACS.TEMP;-1;T)
						 )))

          (* EMACS.TEMP.FILE will be the file to which we 
	  print in lisp and from which EMACS reads 
	  (via FSSUPERIOR).)


          (SETFILEPTR EMACS.TEMP.FILE MAX.EMACS.INPUT)
          (SPACES 1 EMACS.TEMP.FILE)
          (CLOSEF EMACS.TEMP.FILE)

          (* We IOFILE the temp file so that we can write it 
	  and EMACS can read it.)


          (SETQ NAME (MKATOM (SIXBIT (JSYS 127))))
                                                (* We are going to SETNM
						and want to restore.)
          (SETNM (QUOTE LISP))
          (SETQ RSCAN.BLK (LOC (GETBLK 1)))

          (* We now put into the RSCAN area a string that 
	  EMACS will execute when it is fired up.
	  The string that EMACS obtains via FJ is the string 
	  put into the RSCAN minus the first word.
	  EMACS executes the TECO code after the first altmode
	  in the JCL returned by FJ. This execution is coded 
	  in <EMACS>EMACS.INIT.)


          (SETQ LASTEMACS (SUBSYS2 (QUOTE <SUBSYS>EMACS.SAV)
				   NIL NIL NIL NIL))
          (COND
	    ((NEQ NAME (QUOTE LISP))
	      (SETNM NAME)))                    (* We dive down to 
						EMACS.)
          (SETQ EMACS.AC.BLK.START (LOC (GETBLK 1)))
          (SETQ EMACS.BUFFER.BLOCK (READ.AC 2 (CAR LASTEMACS)))
                                                (* AC2 contains the 
						beginning of EMACS' 
						buffer block.
						See <INFO>TECORD.)
          (COND
	    ((EQP (LLSH EMACS.BUFFER.BLOCK -9)
		  (LLSH (PLUS EMACS.BUFFER.BLOCK 9)
			-9))
	      (SETQ EMACS.BLK.SIZE 1))
	    (T (SETQ EMACS.BLK.SIZE 2)))

          (* We aim to map in the EMACS buffer block into LISP
	  so that we can see what's gone on down there and so 
	  that we can give an arg to FSSUPERIOR.
	  We may need one page or two depending upon where the
	  buffer lies.)


          (SETQ OUR.BLOCK.START (LOC (GETBLK EMACS.BLK.SIZE)))

          (* We grab a block (or two) from LISP and save 
	  (the boxed) start.)


          (FOR VAR
	     IN (QUOTE (EMACS.BEG.LOC EMACS.BEGV.LOC EMACS.PT.LOC 
				      EMACS.GPT.LOC EMACS.ZV.LOC 
				      EMACS.Z.LOC EMACS.EXTRAC.LOC 
				      EMACS.RESTART.LOC EMACS.ARG.LOC 
				      EMACS.MODIFF.LOC))
	     AS I FROM 0 DO (SET VAR (PLUS I (LOGOR OUR.BLOCK.START
						    (LOGAND 511 
						 EMACS.BUFFER.BLOCK)))))

          (* We set the values of variables to be the location
	  (in lisp) of the EMACS buffer block contents.)

                                                (* Now map the EMACS 
						buffer block page 
						(s) in.)
          (JSYS 46 (,, (CAR LASTEMACS)
		       (LLSH EMACS.BUFFER.BLOCK -9))
		(,, OURPROCESS (LLSH OUR.BLOCK.START -9))
		(,, 53248 0))
          (COND
	    ((EQP EMACS.BLK.SIZE 2)
	      (JSYS 46 (,, (CAR LASTEMACS)
			   (ADD1 (LLSH EMACS.BUFFER.BLOCK -9)))
		    (,, OURPROCESS (ADD1 (LLSH OUR.BLOCK.START -9)))
		    (,, 53248 0))))             (* We may have to map in
						two pages.)

          (* Now we put the entry vector for EMACS at the end 
	  of the buffer block. When we start up the fork again
	  with SUBSYS1 (which calls SUBSYS) we will ask for 
	  the process to be STARTed. This causes the control 
	  to go the FSSUPERIOR, since the entry vector is 
	  sitting at the location one is supposed to commence 
	  to get FSSUPERIOR fired up.)


          (JSYS 132 (CAR LASTEMACS)
		(,, 1 (PLUS EMACS.BUFFER.BLOCK 7)))
          (SETQ EMACS.MAP.FILE (OUTPUT (OUTFILE (QUOTE EMACS.MAP;-1;T)))
	    )

          (* EMACS.MAP.FILE is the file into which we will 
	  PMAP the buffer pages of EMACS.
	  We read from that file to get the value of the edits
	  performed.)


          (CLOSEF EMACS.MAP.FILE)
          (IOFILE EMACS.MAP.FILE)

          (* We have to have the map file open for read and 
	  for write. Only way to do this in LISP is to first 
	  create a file and then close it and then open it 
	  with IOFILE.)


          (SETQ EMACS.MAP.FILE.EOF 0)

          (* In order to avoid LISP causing an unjustified EOF
	  error when reading from the buffer, we must before 
	  reading make sure that the EOF is beyond the end of 
	  the buffer. We achieve the effect with 
	  SETFILEPOINTER. To avoid needless calls of GETEOFPTR
	  and SETFILEPTR we keep track of the maximum we have 
	  set the EOF pointer to.)


          (SETQ EMACS.MAP.FILE.JFN (OPNJFN EMACS.MAP.FILE))
          (SETQ MAPPED.PAGES NIL)

          (* MAPPED.PAGES is a list of the EMACS process that 
	  we have mapped into EMACS.MAP.FILE.)


          (ECHOCONTROL CLEAR.SCREEN.NUMBER (QUOTE REAL))

          (* A real 30 on a datamedia clears the screen and 
	  puts the cursor at the top.)


          (SETUP.FANCY.DRIBBLE)                 (* We need the RSCAN 
						block no more.)
          (RELBLK (VAG RSCAN.BLK)
		  1)
          (TERPRI T)
          (WHENCLOSE EMACS.MAP.FILE (QUOTE CLOSEALL)
		     (QUOTE NO))
          (WHENCLOSE EMACS.TEMP.FILE (QUOTE CLOSEALL)
		     (QUOTE NO))
          (RETURN NIL))))

(STIW
  [LAMBDA (W)
    (PROG1 (JSYS 123 -5 NIL NIL 2)
	   (COND
	     (W (JSYS 124 -5 W])

(SUBSYS1
  [LAMBDA (THREE INCOMFILE OUTCOMFILE ENTRYPOINTFLG BINARYMODE)

          (* Interlisp's SUBSYS does not work when the process
	  started up fiddles with the terminal interrupt 
	  words, the control character output control, and the
	  binary/ascii mode word. SUBSYS1 tries to do the job 
	  right by returning a triple containing the lower 
	  process handle, the coc, and the tiw.
	  Also, an extra arg permits the forcing of entry into
	  binary mode when the lower process is restarted.
	  (A call in SUBSYS to SFMOD prevents us from 
	  determining whether the lower process was in binary 
	  mode.) Clearly, someone should do SUBSYS right.
	  SUBSYS0 is just the unadvised version of SUBSYS.)


    (PROG (FORK TIW COC)
          [COND
	    ((LITATOM THREE)
	      (ENABLE.CONTROL.C.CAPABILITY)
	      (SETQ FORK THREE)
	      (SETQ TIW (STIW))
	      (SETQ COC (SFCOC)))
	    (T (SETQ FORK (CAR THREE))
	       (SETQ TIW (CADR THREE))
	       (SETQ COC (CADDR THREE]
          (RETURN (RESETFORM (STIW TIW)
			     (RESETFORM (SFCOC COC)
					(PROGN (COND
						 (BINARYMODE (BINARYMODE
							       )))
					       (LIST (SUBSYS0 FORK 
							  INCOMFILE 
							 OUTCOMFILE 
						      ENTRYPOINTFLG)
						     (STIW)
						     (SFCOC])

(SUBSYS2
  [LAMBDA (THREE INCOMFILE OUTCOMFILE ENTRYPOINTFLG BINARYMODE)
    (PROG (FORKTHREE)
          (SETQ FORKTHREE (SUBSYS1 THREE INCOMFILE OUTCOMFILE 
				   ENTRYPOINTFLG BINARYMODE))
      CONTROL-C-LOOP
          (COND
	    ([NOT (ZEROP (LOGAND 17179869184 (JSYS 93 (CAR FORKTHREE)
						   NIL NIL 2]
                                                (* True if and only if 
						EMACS was exited with a 
						control-c.)
	      (JSYS 120)
	      (DISMISS 1000)

          (* We dismiss to permit the operating system to 
	  arrange for the left half of ac1 returned by RFSTS 
	  on the EMACS fork to be 2 instead of 0.0 This is a 
	  horrible hack that is necessitated by a poor 
	  implementation of RFSTS.)


	      (SETQ FORKTHREE (SUBSYS1 FORKTHREE NIL NIL NIL T))
	      (GO CONTROL-C-LOOP))
	    (T (RETURN FORKTHREE])

(TECO
  [LAMBDA (MESS)
    (PROG (DISPLAYTERMFLG)
          (PRIN3 "
F+
0:F
:F
" EMACS.TEMP.FILE)
          (PRIN3 MESS EMACS.TEMP.FILE)
          (PRIN3 "
MM^R Exit To LISP" EMACS.TEMP.FILE)
          (DOWN T])

(WRITE.RSCAN
  [LAMBDA (STR)
    (PUTSTRING STR RSCAN.BLK)                   (* RSCAN)
    (JSYS 320 (LOGOR (LLSH 147904 18)
		     RSCAN.BLK])
)

(RPAQQ NEMACSVARS ((DUMP.SCREEN.AMOUNT 500)
		   EMACS.P.PRINT.LEVEL EMACS.RETURN.ALIST OURPROCESS 
		   MAX.EMACS.INPUT (LASTEMACS NIL)
		   (CLEAR.SCREEN.NUMBER 30)
		   (BL (CHARACTER CLEAR.SCREEN.NUMBER))))

(RPAQ DUMP.SCREEN.AMOUNT 500)

(RPAQQ EMACS.P.PRINT.LEVEL (2 . 7))

(RPAQQ EMACS.RETURN.ALIST ((1000 EMACS.)
			   (1001 EMACS.?=)
			   (1002 EMACS.P)
			   (1003 EMACS.PP)))

(RPAQQ OURPROCESS 131072)

(RPAQQ MAX.EMACS.INPUT 896000)

(RPAQ LASTEMACS NIL)

(RPAQ CLEAR.SCREEN.NUMBER 30)

(RPAQ BL (CHARACTER CLEAR.SCREEN.NUMBER))
(PUTD (QUOTE SUBSYS0)
      (VIRGINFN (QUOTE SUBSYS)))

(ADDTOVAR ERRORTYPELST (16 (COND ((AND (NEQ (QUOTE NOBIND)
					    (GETATOMVAL (QUOTE 
						     EMACS.MAP.FILE)))
				       (EQ (CADR ERRORMESS)
					   EMACS.MAP.FILE))
				  (ERROR "End of EMACS buffer!"))
				 ((AND (NEQ (QUOTE NOBIND)
					    (GETATOMVAL (QUOTE 
						    EMACS.TEMP.FILE)))
				       (EQ (CADR ERRORMESS)
					   EMACS.TEMP.FILE))
				  (ERROR "End of EMACS temporary file!")
				  ))))
(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )
)
(PRETTYCOMPRINT NEMACSCOMS)

(RPAQQ NEMACSCOMS ((FNS * NEMACSFNS)
	(VARS * NEMACSVARS)
	(P (PUTD (QUOTE SUBSYS0)
		 (VIRGINFN (QUOTE SUBSYS))))
	(ADDVARS (ERRORTYPELST
		   (16 (COND ((AND (NEQ (QUOTE NOBIND)
					(GETATOMVAL (QUOTE 
						     EMACS.MAP.FILE)))
				   (EQ (CADR ERRORMESS)
				       EMACS.MAP.FILE))
			      (ERROR "End of EMACS buffer!"))
			     ((AND (NEQ (QUOTE NOBIND)
					(GETATOMVAL (QUOTE 
						    EMACS.TEMP.FILE)))
				   (EQ (CADR ERRORMESS)
				       EMACS.TEMP.FILE))
			      (ERROR "End of EMACS temporary file!")))))
		 )
	(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
		  (ADDVARS (NLAMA)
			   (NLAML)
			   (LAMA)))))
(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA )
)
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1346 27481 (,, 1358 . 1411) (BINARYMODE 1415 . 1732) (CF 
1736 . 2125) (CP 2129 . 2630) (CV 2634 . 3080) (DISPLAY.IN.ECHO.AND.DIVE
 3084 . 3482) (DOWN 3486 . 5641) (DUMP.SCREEN 5645 . 6318) (DUMPX 6322 .
 6730) (DUMPX1 6734 . 7561) (DWN 7565 . 7669) (E! 7673 . 8164) (E. 8168 
. 9100) (EDIT.DRIBBLE.FILE 9104 . 9369) (EMACS. 9373 . 9473) (EMACS.?= 
9477 . 10084) (EMACS.GETDEF 10088 . 11624) (EMACS.P 11628 . 12163) (
EMACS.PP 12167 . 13034) (EMACS.RETURN 13038 . 13128) (
ENABLE.CONTROL.C.CAPABILITY 13132 . 13218) (FLUSH.EMACS 13222 . 14112) (
GET.EMACS.BUFFER 14116 . 14701) (HK 14705 . 14741) (INFO 14745 . 14789) 
(MAKE.QUOTE 14793 . 14994) (MAP.BYTES 14998 . 15268) (
MAP.PROCESS.TO.FILE 15272 . 15668) (PAGE.OF.BYTE 15672 . 15901) (
PUTSTRING 15905 . 16602) (READ.AC 16606 . 16726) (SET.EMACS.VARS 16730 .
 17251) (SETUP.FANCY.DRIBBLE 17255 . 17862) (SFCOC 17866 . 18029) (
START.EMACS 18033 . 24835) (STIW 24839 . 24933) (SUBSYS1 24937 . 26234) 
(SUBSYS2 26238 . 27098) (TECO 27102 . 27327) (WRITE.RSCAN 27331 . 27478)
))))
STOP
