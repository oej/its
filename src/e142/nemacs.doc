Documentation of an interface between EMACS and INTERLISP. 

Robert Boyer, August 1978
(MMCM provided the solutions to most of the hard problems.)

0. Advertisement

Why would anyone want to use EMACS together with Interlisp?

a.  When you are typing to Interlisp, you are already using
a text editor, one of the world's worst:  it has only delete,
control-U, control-W, and  control-R (which works poorly).
If you use EMACS, you get far more control over your type-in
because you can arbitrarily backup and edit.  But far more
importantly, it becomes very difficult to make parenthesis
mistakes:  if you type line feed instead of carriage return,
the next line is indented to the correct place; when you
type a close parenthesis, you see displayed automatically
the open parenthesis to which it corresponds. 

b.  When you use EDITF, you have to keep doing P commands to
see where you are and what you have done.  That is probably
just right for a 100 baud teletype.  But it is silly for a
9600 baud display, with its ability to keep constantly
before your eyes what you are working on.  Until EMACS came,
however, the only available display oriented editors working
on Datamedia's were for text, not code.  Working on LISP
code with, say, TV or TVEDIT commands, is arguably worse
than using EDITF which knows so much about the structure of
LISP sexpressions.  But EMACS is approximately as informed
about the structure of LISP as is EDITF.  And EMACS, besides
keeping your work right before your eyes, is far better at
the character and single parenthesis level than EDITF.  Read
about all the control-meta commands in the EMACS
documentation.  The TECO under EMACS really knows the syntax
of LISP (including ', %, and "). 

1.  User's Guide To Use The Interface

To use the interface, start LISP and load the file
<BOYER>NEMACS.COM into LISP and call (START.EMACS).  When
that returns (it takes a cpu second or two), you can edit
functions, variables, and property lists with EMACS.  To
edit a function, invoke the function CF on the name of the
function (for example CF(FOO)).  The function definition is
written into the EMACS buffer surrounded in a (DEFINEQ...).
The virtual buffer boundaries are narrowed to the contents
of the definition.  You are placed in EMACS, where you may
edit away.  To return to LISP, type meta-z.  But first
put point at the beginning of the
"(DEFINEQ", which can usually be gotten to by control-meta-a
or control-<.  When you return to LISP nothing has yet
happened to your function.  But if you execute the function
E.  (that's E followed by a period to remind you of the TECO
point) of no arguments (e.g.  "E.]"), then the (modified)
DEFINEQ is executed.  When you return to LISP, your display
is refreshed to contain some of the text it held before the
descent into CF.  You may resume ordinary LISP interaction
now, or you can call CF on another function and it will also
be inserted in the buffer (and you will be put down into
EMACS again).  Again you edit, exit with meta-z, and then
you can execute E. if you want.  If you wish to pop up to
LISP in the middle of an edit, then type meta-z and return
to EMACS by invoking (DOWN). 

To edit a variable, use CV.  To edit a property list, use
CP. 

The foregoing is all you need to know to edit.  It may be
useful to know a little more.  To get rid of an EMACS
interface, call (FLUSH.EMACS).  To get EMACS to insert into
its buffer anything you want, simply write to the file that
is the value of the variable EMACS.TEMP.FILE.  Then call
(DOWN) and the stuff written to the temp file will appear in
the buffer at the end (as with the A command).  The virtual
buffer is narrowed to the text that is inserted.  (If
nothing has been written to EMACS.TEMP.FILE since the last
return to LISP, (DOWN) simply returns you to the state in
which you  last left EMACS.   are returned to lisp. If you
execute E.], then the sexp Repeated E.]'s will evaluate
through the buffer.  If you want to read from the buffer
yourself, feel free:  the file is named EMACS.MAP.FILE. 
Upon return to LISP, the file pointer of EMACS.MAP.FILE
is set to the point of the EMACS buffer.

Warning:  never close EMACS.TEMP.FILE or EMACS.MAP.FILE "by
hand."  Use FLUSH.EMACS to get rid of them.  CLOSEALL()
will not close them, but CLOSEF and CLOSEALL(T) will.  A
dribble file is used by the interface to refresh the screen.
If you are using DRIBBLE when you start using NEMACS, or
if you start using DRIBBLE after you start using NEMACS,
then the screen refreshment will not occur.

If you call (DOWN T), then instead of being inserted, the
text that would have been inserted upon entry to EMACS is
executed (as TECO code, of course). 


2.  Guide to the implementation. 

START.EMACS creates a fork (via SUBSYS) and opens up two
files, the values of the variables EMACS.MAP.FILE and
EMACS.TEMP.FILE.  EMACS is passed the instruction MMLOAD
LIB<BOYER>INTERMACSFSEXIT via the FJ (RSCAN) command.
The library INTERMACS contains several EMACS ^R commands.
The library initialization initializes the communication
between the two forks.  The EMACS fork handle is the CAR of
LASTEMACS.  Whenever control is passed to the EMACS fork,
(by a call to DOWN), a teco macro in FS SUPERIOR is invoked,
given a single numeric argument.  The number's absolute
value is the file pointer of EMACS.TEMP.FILE at the time of
descent. If the number is positive, then the FSSUPERIOR
macro inserts the contents of EMACS.TEMP.FILE (up to the
file pointer) at the end of the buffer, narrows the virtual
buffer boundaries to the test inserted, and refreshes the
screen.  If the arg is negative, the stuff that would have
been inserted is macroed (in q-register a).  Nothing happens
if the arg is 0 except that the screen is refreshed.  When
the FSSUPERIOR macro exits, you are in ordinary EMACS
control-r mode.

Before returning to LISP, the command meta-z closes the gap.
Upon return to LISP, we make sure that every page of the
current EMACS buffer is PMAPed into a page of EMACS.MAP.FILE
(the same page numbers for both).  We further set the
variables EMACS.BEG, EMACS.PT, and EMACS.Z to the appropriate
numbers so that they can serve as file pointers into EMACS.MAP.FILE
for the beginning, point, and end of the EMACS buffer.
We set the file pointer of EMACS.MAP.FILE to EMACS.PT.  That's
why E. reads from point.  But you can read anywhere from EMACS.BEG
to EMACS.Z.  You should read with EMACS.READ.TABLE (or a
modification thereof that leaves the handling of control-c
the same) to catch reading past the end of the buffer by
mistake.  We place a sequence of four characters (space,
control-c, double quote mark, control-c) at the bottom of the
buffer (and delete them upon return) to catch unbalanced
expression reading.  The file pointer of EMACS.TEMP.FILE is
set to 0 upon return to LISP.

The full details of the hook EMACS has for doing these
things are found in the last few pages of <INFO>TECORD.  


3.  Miscellaneous Notes on IO

The variable DUMP.SCREEN.AMOUNT controls how many characters
of the dribble file are written to the screen after
returning to LISP from EMACS.  Nothing is written unless
DISPLAYTERMFLG is non-NIL. 

In the file INTERMACS, the delimiter table (what's in ..D)
is fixed to reflect Interlisp (as opposed to the default
Maclisp).  In particular,
	
	all control characters except tab, carriage return, and
	line feed are "OTHER" (i.e. just like ordinary alphabetic letters);

	% quotes the next character,

	" delimits strings (it takes the place of | in Maclisp,
	which has no strings (on DEC machines), but uses | to
	delimit weird atoms);

	/,|, and ; have no significance.

Square brackets mean nothing to EMACS.  If you (SETQ #RPARS
NIL), then the Interlisp pretty printer (PRINTDEF) will not
use square brackets for parentheses, even during MAKEFILE.
You can still type them in to LISP.  But you should set
#RPARS (in your init file, perhaps) because often CF gets
the text of a function from your files, where MAKEFILE might
have written square brackets.  The function would still
be editable in EMACS, but the parenthesis commands of
EMACS would not respect the square brackets. 

When you are down in EMACS, you can pretty print expressions
in two ways.  ^R Format Code (on control-meta-g, which may
be entered by typing hold-g) will pretty print the
expression after point.  It works well on small expressions,
less well on large.  On large expressions, (particularly the
on the result of editing previously reasonably formatted
expressions), ^R Indent Sexp (control-meta-q) works well.
The reason it works well is that it inserts no carriage
returns at all, but merely fixes the number of leading
spaces on each line.  ^R Format Code is a version of the ITS
grinder modified to know about %, ", etc.  

If you set NORMALCOMMENTSFLG to NIL and if you print to
EMACS.TEMP.FILE yourself, be sure to readjust
PRETTYPRINTMACROS by consing (* . GETTCOMMENT) on or you'll
get your comments mapped into the EMACS temp file.

If you set NORMALCOMMENTSFLG to NIL and if you read from
EMACS.MAP.FILE yourself, then you should bind
NORMALCOMMENTSFLG to NIL during the read. 

When typing into EMACS, your close parentheses will cause
the cursor to bounce back to the balancing open parentheses.
The cursor will stay there 1 second or until you type
another character.  To suppress this feature, execute
0m.vLISP ) Hack$ in a minibuffer.  To get a longer delay,
use the integral number of seconds you want instead of 0.
To get bouncing to occur only when the corresponding
open parenthesis is on the screen, use the
negative of the number of seconds. 


4.  Specification of the Interlisp commands

START.EMACS[] creates a new fork containing the EMACS editor
and returns to LISP.				     

DOWN[NEGATE.ARG.FLG] passes control to the EMACS fork.  If
negate.arg.flg is NIL, then EMACS will insert at the end of
the buffer everything in the file EMACS.TEMP.FILE from 0 to
the current file pointer.  If there is something to insert,
then the virtual buffer boundaries are narrowed to what is
inserted.  (The buffer boundaries can be widened to the
whole buffer with ^R Set Bound Full (on control-x-w)).  The
screen is refreshed.  If negate.arg.flg is non-NIL the text
that would have been inserted is put in q-register a and
executed.  
  All of the following commands that descend to EMACS do so
through calls to DOWN.  Upon return to LISP, the file pointer
of EMACS.TEMP.FILE is set to 0.  The screen is refreshed
with the last DUMP.SCREEN.AMOUNT characters from the in the
dribble file.  All the pages of EMACS containing the current
EMACS buffer are mapped into the file EMACS.MAP.FILE.
EMACS.BEG, EMACS.PT, EMACS.Z, and EMACS.MODIFF are set to
the corresponding values in the buffer block (see
<INFO>TECORD).   EMACS.PT is an appropriate file pointer to
use to read from EMACS.MAP.FILE starting at the point.  The
file pointer of EMACS.MAP.FILE is set to EMACS.PT.  An error
is caused if EMACS returns to LISP without first closing the
gap.  (The proper return is via meta-z, but 1F? FSEXIT is
sufficient if you want to do it yourself.)

E.[] executes the sexpression starting at the current point
in the EMACS buffer.  The execution is recorded as an event
on the history list just as if it had been typed into the
top level read-print-eval loop.  The appearance of the execution
on the dribble file is "faked" by printing it to a shallow
depth so that when the screen is refreshed, it looks vaguely
like you typed something in.  But the event is really there,
so that ??, REDO, UNDO, etc. all work.

E![N] executes sexpressions starting at the current point
in the EMACS buffer using E. (above).  If N is a number,
then N sexpressions are read and executed.  If N is NIL,
then all the sexpressions in the buffer after point are
executed.

CF[FNNAME] writes the definition of a function into the end	
of the EMACS buffer and dives down to EMACS with point at
the beginning of the insertion.  The definition is inside a
DEFINEQ and hence suitable for later execution with E.[].
The definition of the function is fetched much the way that
EDITF does except that no spelling correction is attempted.
In particular, if fnname is NIL, lastword is used.  If
fnname has an expr definition, the unadvised, unbroken
version is used.  If fn does not have a expr definition but
does have an EXPR property, that is used.  Otherwise, the
definition of the function in the first file said to contain
it is used.  (Using WHEREIS to find it and using filemaps to
get it quickly into the EMACS buffer without going through
LISP).  When CF returns, the function has not been changed at
all; to cause the redefinition, use E., E!, (or C-M-Y from
TECO). 

CV[X] writes a variable name and definition inside an RPAQQ
into the EMACS buffer at the end and descends to EMACS.  The
variable has not been affected when you return to LISP; to
cause the resetting, use E., E!, (or C-M-Y from TECO).

CP[X] writes a litatom and its property list inside a
SETPROPLIST into the EMACS buffer at the end and descends to
EMACS.  The property list has not been changed when you
return to EMACS; to set the property list, use E., E!,
(or C-M-Y from TECO).

TECO[STR] runs the lower level EMACS on the result
of PRIN1ing STR and then exits.  For example, TECO(HK)
clear the EMACS buffer and returns to LISP.

EDIT.DRIBBLE.FILE[] runs EMACS on the Lisp dribble
file in a buffer called DRIBBLE.  

INFO[] runs the INFO program.

5.  The commands available in the EMACS fork.

Besides the ordinary control-meta commands that are
part of EMACS and the linefeed and LISP ) hack that
come with EMACS lisp mode, there are a few other commands
useful in the Interlisp EMACS interface.

Meta-z runs the macro ^R Exit to LISP.  Simply returns
control to LISP after control has been passed to EMACS
by DOWN (or CF, CV, or CP which call DOWN).  Closes the
gap so that LISP can read from the buffer.  Places the
sequence space, control-c, ", control-c at the end of
the buffer to stop reading beyond the end of the buffer.
If the new release of TOPS-20 permits the effective
setting of the end of file pointer for a file without
the necessity of closing it, these characters will not be
inserted (eventually).

Control-p runs the macro ^R Print to Level.  Prints into
a second window what EDITF prints for the P command.  Useful
if the current sexpression is bigger than a screen full.
To get rid of a second window, you can call ^R One Window,
which is hung on ^X-1.

Control-meta-? runs the macro ^R ARGLIST.  Prints into
a second window the arglist of the function after point
(or after the ( after point if there is one.)  On a datamedia,
this command is entered by typing hold (control-_) followed
by ?.  To get rid of a second window, you can call ^R One Window,
which is hung on ^X-1.

Control-meta-y runs the macro ^R UP EVAL.  Does an exit
up to lisp and then E.'s the expression after point and
retfrom's DOWN.  Approximately identical to meta-z followed
by E.

Currently, the above 3 commands all work by calling ^R Exit
to LISP with an argument.  That argument is deposited in
AC3 when EMACS exits.  When DOWN gets control back, it
retrieves the argument and sassoc's down the alist
EMACS.RETURN.ALIST.  If a pair is found, then the CDR of the
pair is LISPXEVALED.   After evaluation, or if no pair is
found, DOWN refreshes the LISP screen and exits.
Control-meta-y, for example does the E. and then retfrom's
DOWN.